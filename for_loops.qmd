---
title: "For loops ans Conditional Statements"
date: "16 August 2023"
format: html
editor: visual
---

## Conditional Statements

```{r}
temp <- 95

if (temp > 97) {
  print("Temperature Warning")
} else 
  print("It's nice out")
```

#### Create an if else statement for blue whale lengths

-   giant if lengths is greater than 35, medium if between 20 and 35, small if less or equal to than 20

```{r}
blue_whale <- 16 

if (blue_whale > 35) { 
  print("GIANT") 
} else if (blue_whale >= 20 & blue_whale <= 35) {
    print("MEDIUM")
}   else if (blue_whale < 20) {print("SMALL")
  }
```

## Switch Statement

```{r}
housing_type <- "single"

switch(housing_type,
       "single" = print("400"),
       "double" = print("750"),
       "whole" = print("1100"))
```

##### as an if else statament

```{r}
if (housing_type == "whole") {
  print("1100")
} else if (housing_type == "double") {
  print("750")
}else if (housing_type == "single") {
  print("400")
}
```

## For loops

```{r}
height <- c(58, 61, 65, 72, 89, 94)

for (i in seq_along(height)) {
  half_height = height[i] / 2
  print(half_height)
}
```

-   for each value in the height vector, return sum of the value plus the one right after it

```{r}
for (i in seq_along(height)) {
  sum_next = height[i] + height[i+1]
  print(sum_next)
}
```

or to not have that final NA value

```{r}
for (i in seq_along(1:(length(height) - 1))) {
  sum_next = height[i] + height[i+1]
  print(sum_next)
}
```

## Challenge Problem

-   Write a for loop that calculates the value of height for each element divided by the mean of the entire height vector

```{r}
for (i in seq_along(height)) {
  div_mean = height[i] / mean(height)
  print(div_mean)
}
```

## For loop with conditional statement

-   Write a for loop with a conditional (if) statement that returns the means of all numeric variables in the penguins data set.

```{r}
library(palmerpenguins)
tibble::as_tibble(penguins)
```

```{r}
for (i in seq(penguins)) {
  if (is.numeric(penguins[[i]])) {
  mean <- mean(penguins[[i]], na.rm = TRUE) 
  print(mean)
}
}
```

## Functional programming for easier iteration

#### apply()

Use apply to iterate over rows or columns - margin = 1 is rows, margin = 2 is columns

```{r}
apply(mtcars, 2, median)
```

#### dplyr::across()

Use across to calculate mean flipper length of penguins by species

```{r}
library(tidyverse)
```

##### great way to get summary stats!

```{r}
penguins %>%
  group_by(species, island) %>%
  summarise(mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE),
            sd_flipper_length = sd(flipper_length_mm, na.rm = TRUE),
            max_body_mass = max(body_mass_g, na.rm = TRUE))
```

-    this is a way to manually code it

But we can also use across in summarise

```{r}
penguins %>%
  group_by(species, island) %>% 
  summarize(across(where(is.numeric), mean, na.rm = TRUE))
```

## Detecting a string pattern

```{r}
food <- "I love burritos"

#str_detect(food, burritos)


if (str_detect(food, "burritos")) {
  print("yay burritos")
} else {
  print("What about burritos?")
}

```


